import { Geometry, MeshPhongMaterial, Fog, Light, Vector3, Material, Vector2, BufferGeometry, ShapeBufferGeometry, Mesh } from 'three';
import Cell from '../grid/Cell';
import Tile, { TileTerrain } from '../map/Tile';
import Grid from '../grid/Grid';
import { EngineGridShapes, EngineTileShapes } from '../Engine';
import Entity, { EntityPlacementType } from '../env/Entity';
import MeshText, { MeshTextSettings } from '../env/MeshText';

// Should return TRUE/FALSE
export type heuristic = (origin: Cell, next: Cell) => boolean;

/* CONFIG OBJECT INTERFACES */
export interface TileSettings {
  cell: Cell;
  // geometry: BufferGeometry;
  // vertexGeometry: ShapeBufferGeometry,
  material: Material;
  scale: number;
  tileShape: EngineTileShapes;
  grid: Grid;
};

export interface TileSettingsParams {
  cell: Cell;
  // geometry: BufferGeometry;
  // vertexGeometry: ShapeBufferGeometry,
  // material?: Material;
  scale?: number;
  tileShape: EngineTileShapes;
  grid: Grid;
  terrainType?: TileTerrain;
};

export interface GridSettings {
  gridShape: EngineGridShapes;
  gridRadius: number;
  cellRadius: number;
  cellShape: EngineTileShapes;
  isLoad: boolean;
  gridJSON?: GridJSONData
};

export interface GridSettingsParams {
  gridShape?: EngineGridShapes;
  gridRadius?: number;
  cellRadius?: number;
  cellShape?: EngineTileShapes;
  isLoad?: boolean;
  gridJSON?: GridJSONData;
};

export interface EntityJSONData {
  entityName: string;
  heightOffset: number;
  placementType: EntityPlacementType;
  placementVert: number;
  placementEdge: number;
  position: number[];
}

export interface MeshTextJSONData {
  settings: MeshTextSettings,
  text: string;
  groupScale: number[]
}

export interface TileJSONData {
  terrainInfo: { type: TileTerrain, elevation: number, moisture: number }
  text?: MeshTextJSONData;
  entities?: EntityJSONData[];
  customData?: { [name: string]: any }
}

export interface CellJSONData {
  q: number;
  r: number;
  s: number;
  h: number;
  walkable: boolean,
  userData: {}
  tileData?: TileJSONData
}

export interface GridJSONData {
  gridShape: EngineGridShapes;
  gridRadius: number;
  cellRadius: number;
  cellShape: EngineTileShapes;
  cells: { [key: string]: CellJSONData };
  // autoGenerated: boolean;
}

export interface MapSettings {
  tileScale: number;
  entities: { [name: string]: () => Mesh }
  onTileCreated?: (tile: Tile, index: number) => void;
}

export interface MapSettingsParams {
  tileScale?: number;
  isLoad?: boolean;
  gridJSON?: GridJSONData;
  entities?: { [name: string]: () => Mesh }
  onTileCreated?: (tile: Tile, index: number) => void;
}

// export interface ExtrudeSettings {
//   amount: number;
//   bevelEnabled: boolean;
//   bevelSegments: number;
//   steps: number;
//   bevelSize: number;
//   bevelThickness: number;
// };

// export interface ExtrudeSettingsParams {
//   amount?: number;
//   bevelEnabled?: boolean;
//   bevelSegments?: number;
//   steps?: number;
//   bevelSize?: number;
//   bevelThickness?: number;
// };

export interface PathfinderSettings {
  allowDiagonal: boolean;
  heuristicFilter: heuristic;
}

export interface PathfinderSettingsParams {
  allowDiagonal?: boolean;
  heuristicFilter?: heuristic;
}

export interface ViewSettings {
  element: HTMLElement;
  alpha: boolean;
  antialias: boolean;
  clearColor: number;
  sortObjects: boolean;
  fog: Fog;
  light: Light;
  lightPosition: Vector3;
  sceneMarginSize: number;
  cameraControlSettings: CameraControlSettings;
}
export interface ViewSettingsParams {
  element?: HTMLElement;
  alpha?: boolean;
  antialias?: boolean;
  clearColor?: number;
  sortObjects?: boolean;
  fog?: Fog;
  light?: Light;
  lightPosition?: Vector3;
  sceneMarginSize?: number;
  cameraControlSettings?: CameraControlSettings;
  entities?: { [name: string]: () => Mesh }
}

export interface CameraControlSettings {
  controlled: boolean;
  cameraPosition: Vector3;
  cameraFov: number;
  cameraNear: number;
  cameraFar: number;
  currentDistance: number;
  minDistance: number;
  maxDistance: number;
  zoomAmount: number;
  // hotEdges: boolean;
  autoRotate: boolean;
  currentPolarAngle: number;
  minPolarAngle: number;
  maxPolarAngle: number;
  maxAzimuthAngle: number;
  minAzimuthAngle: number;
  // horizontalRotation: boolean;
}

export interface CameraControlSettingsParams {
  controlled?: boolean;
  cameraPosition?: Vector3;
  cameraFov?: number;
  cameraNear?: number;
  cameraFar?: number;
  currentDistance?: number;
  minDistance?: number;
  maxDistance?: number;
  zoomAmount?: number;
  hotEdges?: boolean;
  autoRotate?: boolean;
  currentPolarAngle?: number;
  minPolarAngle?: number;
  maxPolarAngle?: number;
  maxAzimuthAngle?: number;
  minAzimuthAngle?: number;
  horizontalRotation?: boolean;
}

/*******************************************/

/*MAP INTERFACES*/
export interface ViewController {
  dispose(): void;
  updateControlSettings(config: CameraControlSettings): void;
  toggleControls(): void;
  toggleHorizontalRotation(bool: boolean): void;
  panInDirection(direction: Vector2): void;
  panCameraTo(tile: Tile | Cell, durationMs: number, onStart: () => void, onComplete: () => void): void;
}